// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AFT.RegoV2.Tests.Unit.Wallet
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Cancel bet")]
    [NUnit.Framework.CategoryAttribute("Unit")]
    public partial class CancelBetFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CancelBet.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Cancel bet", "  \"Bet\" is a short for Bet transaction.\r\n  Bet transactions are:\r\n      - BetPlac" +
                    "ed\r\n      - BetWon\r\n      - BetLost", ProgrammingLanguage.CSharp, new string[] {
                        "Unit"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not cancel non existent bet")]
        public virtual void CanNotCancelNonExistentBet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not cancel non existent bet", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
    testRunner.Given("I deposited $100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
  testRunner.And("I place $100 bet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
    testRunner.When("I cancel the BetWon transaction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
    testRunner.Then("application exception should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can not cancel same bet twice")]
        public virtual void CanNotCancelSameBetTwice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not cancel same bet twice", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
    testRunner.Given("I deposited $100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
        testRunner.And("I place $100 bet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
        testRunner.And("I cancel the BetPlaced transaction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
    testRunner.When("I cancel the BetPlaced transaction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
    testRunner.Then("invalid operation exception should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can cancel bet transactions only using cancel the bet call")]
        [NUnit.Framework.TestCaseAttribute("I deposited $100", "Deposit", null)]
        [NUnit.Framework.TestCaseAttribute("I withdraw $100", "Withdraw", null)]
        [NUnit.Framework.TestCaseAttribute("I issued $100 bonus to Bonus balance", "Bonus", null)]
        public virtual void CanCancelBetTransactionsOnlyUsingCancelTheBetCall(string action, string trxName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can cancel bet transactions only using cancel the bet call", exampleTags);
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
    testRunner.Given("I deposited $100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
        testRunner.And(string.Format("{0}", action), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
    testRunner.When(string.Format("I cancel the {0} transaction", trxName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
    testRunner.Then("invalid operation exception should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can cancel bet transactions only using cancel the bet call (multi-step)")]
        public virtual void CanCancelBetTransactionsOnlyUsingCancelTheBetCallMulti_Step()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can cancel bet transactions only using cancel the bet call (multi-step)", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
    testRunner.Given("I deposited $100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
        testRunner.And("I place $100 bet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
        testRunner.And("I cancel the BetPlaced transaction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
    testRunner.When("I cancel the BetCancelled transaction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
    testRunner.Then("invalid operation exception should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Canceling a bet can lead to negative balance")]
        public virtual void CancelingABetCanLeadToNegativeBalance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Canceling a bet can lead to negative balance", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
    testRunner.Given("I deposited $100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
        testRunner.And("I place $100 bet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
        testRunner.And("I win $120 from bet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
        testRunner.And("I apply $100 Withdrawal lock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
        testRunner.And("I withdraw $100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
    testRunner.When("I cancel the BetWon transaction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
    testRunner.Then("Main balance should be $-100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
        testRunner.And("BetCancelled transaction should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
        testRunner.And("transaction main balance amount should be $-120", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Canceling a bet, debited from both balances, is credited back proportionally")]
        public virtual void CancelingABetDebitedFromBothBalancesIsCreditedBackProportionally()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Canceling a bet, debited from both balances, is credited back proportionally", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
    testRunner.Given("I deposited $150", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
        testRunner.And("I issued $50 bonus to Bonus balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
        testRunner.And("I place $200 bet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
    testRunner.When("I cancel the BetPlaced transaction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
    testRunner.Then("Main balance should be $150", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
        testRunner.And("Bonus balance should be $50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
        testRunner.And("BetCancelled transaction should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
        testRunner.And("transaction main balance amount should be $150", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
        testRunner.And("transaction bonus balance amount should be $50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
        testRunner.And("4 TransactionProcessed events should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
